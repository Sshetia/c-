game.h

#define ROW 5
#define COL 5
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void initboard(char board[ROW][COL], char row, char col);
void display(char board[ROW][COL], char row, char col);
void playermove(char board[ROW][COL], int row, int col);
void computermove(char board[ROW][COL], int row, int col);
char iswin(char board[ROW][COL],int row,int col);
//*表示玩家赢
//#表示电脑赢
//q表示平局
//c表示继续游戏

game.c

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include "game.h"
void initboard(char board[ROW][COL],char row,char col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] = ' ';
		}
	}
}
void display(char board[ROW][COL], char row, char col)
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < row - 1)
				printf("|");
		}
		printf("\n");
		if (i < row-1)
		{
			for (j = 0; j < col; j++)
			{
				printf("---");
				if(j<col-1)
				printf("|");
			}
			printf("\n");
		}
	}
}
 void playermove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	while (1)
	{
		printf("请输入要下的坐标\n");
		scanf("%d%d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)
		{
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else
			{
				printf("该坐标已被占用\n");
			}
		}	
		else
		{
			printf("坐标非法,请重新输入\n");
			break;
		}
	}

}
 void computermove(char board[ROW][COL], int row, int col)
 {
	 int x = 0;
	 int y = 0;
	 printf("电脑走\n");
	 while (1)
	 {
		 x = rand() % row;
		 y = rand() % col;
		 if (board[x][y] == ' ')
		 {
			 board[x][y] = '#';
			 break;
		 }

	 }
 }
 //1表示满了
 //0表示没满
 int isfull(char board[ROW][COL], int row, int col)
 {
	 int i = 0;
	 int j = 0;
	 for (i = 0; i < row; i++)
	 {
		 for (j = 0; j < col; j++)
		 {
			 if (board[i][j] == ' ')
			 {
				 return 0;
			 }
		 }
	 }
	 return 1;
 }
 char iswin(char board[ROW][COL], int row, int col)
 {
	 int i = 0;
	 //横三行
	 for (i = 0; i < row; i++)
	 {
		 if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		 {
			 return board[i][0];
		 }
	 }
	 //竖三行
	 for (i = 0; i < col; i++)
	 {
		 if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		 {
			 return board[0][i];
		 }
	 }
	 //'\'酱紫斜
	 if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
	 {
		 return board[0][0];
	 }
	 //'/'酱紫斜
	 if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[2][0] != ' ')
	 {
		 return board[2][0];
	 }
	 if (1 == isfull(board, ROW, COL))
	 {
		 return 'q';
	 }
	 else
	 {
		 return 'c';
	 }
 }
 
 test.c
 
 #define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include "game.h"
void menu()
{
	printf("********************\n");
	printf("***1.play  0.exit***\n");
	printf("********************\n");

}
//游戏的整个算法实现
void game()
{
	char ret = 0;
	//数组存放走出的棋盘信息
	char board[ROW][COL] = { 0 };//全部空格
	//初始化棋盘
	initboard(board, ROW, COL);
	//打印棋盘
	display(board,ROW,COL);
	while (1)
	{
		//玩家下棋
		playermove(board, ROW, COL);
		display(board, ROW, COL);//打印棋盘
		//判断玩家是否赢
		ret = iswin(board,ROW,COL);
		computermove(board, ROW, COL);//电脑下棋
		display(board, ROW, COL);//打印棋盘
		ret = iswin(board,ROW,COL);//判断电脑是否赢
		if (ret != 'c')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢了\n");
	}
	else if (ret == '#')
	{
		printf("电脑赢了\n");
	}
	else
	{
		printf("平局\n");
	}
}
void test()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择:>\n");
		scanf("%d", &input);
		switch (input)
		{
		case 1:
			game();
			break;
		case 2:
			printf("退出游戏\n");
			break;
		default:
			printf("请重新选择\n");
			break;
		}
	} while (input);
}
int main()
{
	test();
	return 0;
}
